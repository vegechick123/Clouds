// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "UnityCG.cginc"

float4x4 CameraToWorld;
float4x4 CameraInverseProjection;
float3 containerSize;
float3 containerPos;
float3 lightDir;
float3 lightCol;
float3 ambientCol;
float3 sampleScale;
float lowbound;
float scartterX;
float extinctionX;
float densityScale;
float ambientStrength;
float bottom;
float top;
float erodeStrength;
float3 offset;
float HGg;
float Hgmin;
int channel;
sampler2D _CameraDepthTexture;
Texture2D<float4> Depth;
SamplerState sampler_Depth;
Texture3D<float4> Cloud;
SamplerState sampler_Cloud;
Texture2D<float4> heightMap;
SamplerState sampler_heightMap;
SamplerState sampler_trilinear_repeat;
Texture2D <float4> Source;
SamplerState sampler_Source;
Texture3D <float4> Worely;
SamplerState sampler_Worely;
Texture2D<float4> Test;
SamplerState sampler_Test;
RWTexture2D<float4> Result;
struct Ray
{
	float3 origin;
	float3 direction;
};
float rand(float2 uv)
{
	return frac(sin(1246.12*uv.x+124641.124)*801821.12407+sin(21468*uv.y+914610.1269)*1466128.1674);
}
float2 getuv(uint3 id)
{	uint width,height;
	Result.GetDimensions(width, height);
	float2 uv =float2((id.xy))/float2(width,height);
	return uv;
}
Ray CreateRay(float3 origin,float3 direction)
{
	Ray ray;
	ray.origin =origin;
	ray.direction =direction;
	return ray;
}
Ray CreateCameraRay(float2 uv)
{
	uv=2*uv-float2(1.0,1.0);//map to (-1,1);
	float3 origin = mul(CameraToWorld,float4(0,0,0,1)).xyz;
	float3 direction = mul(CameraInverseProjection,float4(uv,0,1)).xyz;
	direction =mul(CameraToWorld,float4(direction,0)).xyz;
	direction =normalize(direction);
	return CreateRay(origin,direction);
}
float remap(float val,float l1,float r1,float l2, float r2)
{
	return l2+(val-l1)*(r2-l2)/(r1-l1);
}
float SampleDensity(float3 pos)
{

	  
	  float4 density=Cloud.SampleLevel(sampler_trilinear_repeat,(pos+offset)*sampleScale,0);
	  float res=density.r*0.625+density.g*0.2+density.b*0.15+density.a*0.05;

	  float3 detailpos=(pos+offset)*sampleScale+float3(0.5,0.5,0.5);
	  float detailDensity = dot(Worely.SampleLevel(sampler_Worely,detailpos,0),float4(0.5,0.25,0.125,0.125));
	  float detailWeight = (1-res)*(1-res)*(1-res)*erodeStrength;
	  res-=detailWeight*detailDensity;

	  float height=pos.y/containerSize.y+0.5;
	  float bottom = 0.1f;
	  float top = 0.6f;
	  float heightCof=saturate(remap(height,0,bottom,0,1))*saturate(remap(height,1,top,0,1));

	  

	  res*=heightCof;
	  if(res<lowbound)
		return 0;
	  else
		return (res-lowbound)*densityScale; 
}
float3 LightMarching(float3 pos)
{
	Ray ray = CreateRay(pos,lightDir);
	float step=5;
	float nowdistance = 0;
	float resDensity=0;
	float extinction=1;
	for(int i=0;i<10;i++)
	{
		float3 nowpos=float3(ray.origin+nowdistance*ray.direction);
		nowpos=(nowpos-containerPos);
		nowdistance+=step;
		if(abs(nowpos.x)>(containerSize.x/2)||abs(nowpos.y)>(containerSize.y/2)||abs(nowpos.z)>(containerSize.z/2))
			{				
				break;
			}
			else
			{
				float density=SampleDensity(nowpos);
				extinction*=exp(-extinctionX*density*step);				
				if(extinction<0.05)
					break;
			}
	}
	return (ambientStrength+extinction*(1-ambientStrength));//lightstength
}
float Ei(float z)
{
	return 0.5772156649015328606065 + log( 1e-4 + abs(z) ) + z * (1.0 + z * (0.25 + z * ( (1.0/18.0) + z * ( (1.0/96.0) + z *(1.0/600.0) ) ))); 
}
float3 AmbientCalc(float3 pos)
{
	float Hb =pos.y-containerSize.y/2+containerPos.y;
	float a = extinctionX*Hb;
	float bottomLight=max(0,exp(-a)+a*Ei(-a));
	float Ht =containerSize.y-Hb;
	a=extinctionX*Ht;
	float topLight=max(0,exp(-a)+a*Ei(-a));

	return (topLight+bottomLight)*ambientCol*ambientStrength;//lightstength
}
float HG(float a,float g)
{
	float g2=g*g;
	return max(Hgmin,(1-g2)/(4*3.1415926*pow((1+g2-2*g*a),1.5)));
}
float3 RayMarching(Ray ray,float depth,float3 background,float2 uv)
{
	float step=7+rand(uv);
	float nowdistance = 0;

	float3 cloudDist = containerPos-ray.origin-sign(ray.direction)*containerSize/2;
	cloudDist/=ray.direction;
	nowdistance = max(cloudDist.x,cloudDist.y);
	nowdistance = max(nowdistance,cloudDist.z);
	nowdistance = max(0,nowdistance);
	nowdistance+=rand(uv);
	//nowdistance=0;
	float hg=HG(dot(ray.direction,lightDir),HGg);
	float nowDensity=0;
	float3 nowpos;
	float extinction=1;
	float3 scattering=0;
	while(nowdistance<depth)
	{
		float3 worldPos = float3(ray.origin+nowdistance*ray.direction);
		nowpos=worldPos;
		nowpos=(nowpos-containerPos);
		//step+=1;
		nowdistance+=step;
		if(abs(nowpos.x)>(containerSize.x/2)||abs(nowpos.y)>(containerSize.y/2)||abs(nowpos.z)>(containerSize.z/2))
			{				
				break;
			}
			else
			{
				float density=SampleDensity(nowpos);
				extinction*=exp(-extinctionX*density*step);
				nowDensity+=density;
				scattering +=density*extinction*(1-pow(exp(-extinctionX*nowDensity*step),2))*(LightMarching(worldPos))*step;
			}
	}
	return background*extinction+(scattering*hg+ambientCol*ambientStrength*nowDensity)*scartterX;
}
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	
	float2 uv=getuv(id);
	Ray ray=CreateCameraRay(uv);
	float depth = Depth.SampleLevel(sampler_Depth,uv,0).r;
	depth =	LinearEyeDepth(depth);
    float3 background =Source.SampleLevel(sampler_Source,uv,0).xyz;
	
	float3 res=float3(0,0,0);
	res=RayMarching(ray,depth,background,uv);
	//res=temp.x*lightCol+temp.y*background;
	//res=ray.direction;
	//res=containerPos.xyz;
	//res=containerSize.xyz;
	//res=cloudDist;
	float hg=HG(dot(ray.direction,lightDir),HGg);
	if(channel==1)
		res=Cloud.SampleLevel(sampler_Cloud,float3(uv.x,uv.y,0),0).r*float3(1.1,1,1);
	else if(channel==2)
		res=Cloud.SampleLevel(sampler_Cloud,float3(uv.x,uv.y,0),0).g*float3(1.1,1,1);
	else if(channel==3)
		res=Cloud.SampleLevel(sampler_Cloud,float3(uv.x,uv.y,0),0).b*float3(1.1,1,1);
	else if(channel==4)
		res=Cloud.SampleLevel(sampler_Cloud,float3(uv.x,uv.y,0),0).a*float3(1.1,1,1);
	//res=Test.SampleLevel(sampler_Test,uv,0);
	//res=float3(1.0f,1.0f,1.0f)*diff;
	//float3 res=depth;
	//res=lightDir;
	//res=hg*float3(1.0,1.0,1.0)*50;
	Result[id.xy]=float4(res,1.0);
}
